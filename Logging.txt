2016/5/12
增加father-next，这样变成网状ok
遍历依然是树状遍历
回馈路由选择第一条路由回馈


=============
2016/5/10
u16 FF=11111111=8 bit=1 byte



隐患，packet等于null时，send：192,101,102,,0,4 中间有,,，leetcode 151的测试问题，这个在后面token读取时，处理可能有问题
可能1：token=null，那么后面就不再进行处理了
可能2，token！=null，我也不知道是啥结果，可能需要 换一个判定语句，比如if packet！=0
可能3，stm32 可能会给我一个别的答案

===========================


2015/5/9
为啥vs编译不通过了。回头git回到上一个版本好了(就是程序有问题，之前也不知道为啥能编译通过)。

=======
4.读取回馈路由信息，+send信息格式【100,101,1,104+message   pub信息修改+读取头路由】
【选的这个】1.查找路由后，只路由头只send下一条，和终极目的地址，每次收到后查询路由表
2.send全部路由，逐条读取发送【did有n条，读一条，发送删一条】
2.send全部路由，逐条读取发送【did有1条，中间n条，自己匹配，不删】

5.组成网状
说明一个节点有两个+father
sendback回馈查找路由路径时，
1.可以回馈father+编号，按照编号n条路由
【选择这个】2.收到pingack时，就根据长短来确定直系father（短包前向插入，长包定点插入-顺序插入），两短就按最  新时间顺序前向插入，最新的做首选。
  按照直系father返回一条路径，最后哪层不通，哪层查找路由。


组成网状
建立路由表的时候，
一个节点有两个father，所以发送路由时候，要发送两条
100,101#101,1,2#1,104#2,104#104,105,106
#1,104#2,104#
【选择这个 add father_next】可以直接在biuld路由表时候，先查找点，如果查找到，就直接father添加一下1,（这样的图该怎么遍历）
104这个节点

网状遍历会不会有问题
1.遍历可以找到点，但是点直接选择father-》father模式，那么会绕远吗？还是大家都选择直系，所以还可以？
2.因为这个时候已经是图了
所以可以直接上图算法，dijistra
【选这个】3.nope，遍历时，因为
100,101#101,1,2#1,104#2,104#104,105,106
1,2,是101的子节点，所以遍历没问题，无需走father路线

=====================


2015/5/8
1.packet改成char【】 c语言没有string

int _send_rt(unsigned short did,char * packet){
	char pack[200];
	strcpy(pack, packet);
	unsigned short rc = _send_simple_command(PINGRESP, 102, did, pack);

	rc = 0;
	return rc;

}

2.输出send rt【send message 格式  ok】

int _send_rt(unsigned short did,char * packet){
	char pack[200];
	strcpy(pack, packet);
	unsigned short rc = _send_simple_command(PINGRESP, 102, did, pack);

	rc = 0;
	return rc;

}

========================
2015/5/7
目前项目步骤：
1.vs上看是否构成子树（send_rt ok!build rt ok）
3.增加路由查找遍历：【回馈路径信息】（ok）

2.输出send rt【send message 格式  】


4.读取回馈路由信息，+send信息格式【100,101,1,104+message   pub信息修改+读取头路由】
5.需要组成网状网络
6.keil调试完成12
7.keil写简单主从逻辑

8.测试

========
init后为啥father-》还是不是null：init重新分配内存空间这里小问题
========
1.build rt real ok.
2.oh no 需要循环建立子树
哈哈哈哈，因为是高低顺序，所以先主节点，再子节点，所以一层一层，所以肯定能找到头节点然后build
所以建造的就是全网路由，不用循环，已经while了
while (token1 != NULL)
	{

		token1 = strtok_s(NULL, seps, &pNext);
		printf("there!!!!!!!!!!!\n\n");
		if (token1 != NULL){
			build_my_child_rt(token1);
			printf("four!!!!!!!!!!!\n\n");
		}
		

	}

3.需要组成网状网络

===================
2016/5/6
目前项目步骤：
1.vs上看是否构成子树（send_rt ok!build rt ok）
2.输出send rt
3.增加路由查找遍历：【回馈路径信息】

4.keil调试完成12
4.keil写简单主从逻辑

6.测试

========================
2016/5/5
备忘：
2.unsigned short


//加入以下代码,支持printf函数,而不需要选择use MicroLIB	  
#if 1
//#pragma import(__use_no_semihosting) 

奇怪的问题：回头上板子再测

=============

2016/5/4
备忘：
1.rt修改后，在recv――process调用中
2.unsigned short



app环境搭好


keil组网组完


============
2016/5/1
how to 组成网状呢

rt.c这里基本差不多了


==================
2016/4/30

	if (tree != 0){
		if (tree->mid != 0){

			printf("tree_mid->%d\n", tree->mid);

			if (tree->mid == mid){
				FOUND_MID = 1;
				after_found_id = tree;
				return;

			}


		}

		
	}

【todo】
1._send_simple_command(MY_RT,my_rt_point);//
2.htnol;
3.改packet char【】属性

==============
2016/4/29
add preordertraverse (node * tree, int mid)
【to do】
整理程序
===============
2016/4/28
【to do】



建立路由思路：
读取child路由表，#切分，每条build_my_child_rt

【todo】
searching_node(tmp_id))// must return a point to tmp_id

/*
add something to change the point to tmp_id 
void move_piont_to_build_rt(){node *head, node *tmp_id_point}
*/


先ping-pingack--然后所有点都组完，从下往上发路由信息



====================
2016/4/27
弥强advice：
集中式路由 or 分布式路由  真正网状，包太长
usart两个字符串数组轮着来128字节
printf不加中断里面，不然没法再中断

继电器 峰谷电桥
电流互感 电动汽车 家用 公用
rsst/sivr  csma 信道碰撞检测 time 2t






弥强师兄，我们有编程小问题：
1.现在usart串口收发全双工，硬件没有问题，但是程序编写时，怎么实现异步通信呢，我们想把收到的数据帧全部储存在一起，然后再逐个数据处理。想用队列先进先出，储存每个char型字符，再用###符号做两条数据帧的间隔，for循环读取一个完整数据帧，然后再pop掉###前的完整数据帧。
问题是：1.感觉这个实现有点麻烦
	2.这个队列能满足实存实出吗
	3.c语言什么数据结构都要自己写，感觉特别容易出错，这个怎么办，有库吗？
	4.

2.公司那边拓扑结构没有定，说上板子测试怎么好怎么来
  师兄建议：分布式路由
  那路由选择的时候怎么处理，如何确保信息传输到位

3.这个项目后期怎么做，我们原来后期想搭服务器做app（感觉好难）。



目前遇到问题：
1.拓扑结构
2.集中式路由 or 分布式路由

3.异步通信，消息队列
4.字符串切分

==========================
2016/4/26
read 495 c problem
add usart_recv_current

=================
2016/4/25
push usart to xu
===============
2016/4/22
邵萌：
簇头个数不固定
在组网前集中器不知道簇头个数
设计模式没错
链接方式是综合的多模式的
不是安装时就知道的
不一定第一次广播确定，随时可以变的
可能变成簇头

前期可以先设计一个这样模式的，后续再进行多模式优化，可用Fuzzy的方式，也可用water drop方式


问题：
1.token1 = strtok(NULL, seps);token为空
while (token1 != NULL)
	{
		// Get next token:

		//printf(" %s\n", token1);
		printf("^^^^^^^^ %s^^^^^^^^\n", token1);
		token1 = strtok(NULL, seps);
		printf("^^^^^^^^ %s^^^^^^^^\n", token1);
		recv_process(token1 );

	}
2.
usart每次重新刷新
for (t = 0; t<len; t++)
{
	//USART1->DR = USART_RX_BUF[t];
	_usart_recv_packet[t]=USART_RX_BUF[t];
	while ((USART1->SR & 0X40) == 0);//?-?・・??í,?±μ?・??ííê±?   
}
从零存，设新的改。。。（堆栈）
====================
2016/4/21
今天预计：
1.星型路由表结构
2.主子节点逻辑
3.usart
4.Dsijiatr路由查找算法
5.蚁群算法

==================
2016/4/20
done nothing
feel down

why cannot push?
========
2016/4/18

48-command,102-mid,101-did,192,0,2

add did
can judge whether the message is send to me
when recieve a pingreq: fisrt time on child second time on next
加入destny id 收到后判断是不是发给我的信息

小问题：
发pingreq时，全1111，那么【主从节点】发给【从从】的，在测试中会被【主节点】收到，人为衰减。

==========================
2016/4/15
小婷advice
十字图

小组讨论
集中器：
1.获取簇头的信息：发询问帧给簇头（广播形式，不知簇头的物理地址）：得到簇头的ip（自己人为定义，路由表），添加到自己的路由

小问题：
我知道所有所有的物理地址（随硬件做了就定了）


==============
2016/4/14

邵萌：
1.wifi判断上行 设置为1
2.帧发给服务器端，服务器端程序自己写自己解析


==============
48,0,0,12288,0,0,4  publish
208,0,0,53248,0,0,4 pingresq
=========
1.先组网-组网完优化路由-dijkstra算法（突然觉得这个也挺简单的）
2.如果简单好用的话，就组网-测试


====================

论文有趣点：
1.如果中继地址和自己的 ID 相同，则转发这个报文
（同时中继地址 目的地址 这样减少命令帧设计）
2.集中器测信噪比
3.集中器在时间Tm 内收到终端的应答报文后，先检验通信信号的信噪比，如果信号信噪比满足预先设定的条件，则记录下终端地址以及相应的通信信号信噪比。把在第一轮中所有满足条件的终端列为逻辑层 1（Layer 1）；
4.组网全部在集中器中完成，对设备的要求较低，除集中器外，其余终端只要求具有信号的接收和转发功能，简化了设备的硬件结构，

论文疑问点：
1.数据帧结构，论文说参考多功能电表通信协议。我们目前组网程序里的数据帧是自己写的，这个随时可以改没有问题，但是想尽量写的简单。
所以想请问数据帧结构必须参考多功能电表通信协议吗？我们自定义可行不？还是说它涉及到上层传输？
我想只是节点与集中器，节点与节点通信，那自定义数据帧在这两种传输中是可以相互识别的，因为这个算最底层，直接拆帧就可以读取上层传输的信息了。
但我们通信范围涉及【 集中器直接和非节点直接通信吗】？

2.论文里集中器，我不了解用什么硬件实现...
我们的组网程序是直接移植到集中器上吗？还是说，集中器就是我们的开发板+检测信噪比模块？


===================================
小疑问点：stm32是全双工，但是程序实现里是先平再recv，如何保持时刻监听？
而且usart貌似是自己时刻监听，然后把收到的数据储存在usart_rx_buf[]里，然而我们这样定期处理会不会有问题。




主节点逻辑：
1.每一分钟发送一次ping帧（目前只写了广播短帧）
2.收到pingack后，将子节点id存入自己路由表（多叉树）中
3.给子节点发送请求亮1灯（升级主从）下行消息
4.时刻监听

子1节点逻辑：
1.时刻监听
2.收到ping帧后，存入主节点id 给主节点id发送pingack
3.时刻监听
4.收到主节点发给自己要求亮1灯消息
5.亮1灯
6.升级为主从节点
7.每一分钟发送一次ping帧（目前只写了广播短帧）
8.收到pingack后，将子节点id存入自己路由表（多叉树）中
9.给子节点发送请求亮灯（升级主从）下行消息
10.时刻监听

子2节点逻辑：
1.时刻监听
2.收到ping帧后，存入主节点id 给主节点id发送pingack
3.时刻监听
4.收到主节点发给自己要求亮2灯消息
5.亮2灯


目前只写了ping帧广播短帧，还需要写广播长帧

========================
2016/4/13
弥强
packetk可以设成char【】数组形式，上层解析
目前只有一条路通达，不需要算法
电力线 单播就算广播，全f设置
id改成同一字段的网络号
测跳通时，手工屏蔽接受到的信号
子节点发送链路状态给父节点，这样全网通，然后逐层遍历，最后一层有mid就发，主节点没有收到回馈就重发
用ping短帧，长帧来衡量链路状态---对应qos

问：
1.后期上层时，只有对应stm32可以解析自己写的数据帧，那么如何推送信息给手机端
2.写多叉树的意义是啥，我为啥不直接把子节点id存到字符串或者数组里呢？


=============

2016/4/12
【todo】：htnol网络字节数转换

节点自己子节点遍历查找ok！

========================================
2016/4/11
【TODO】：idea:
因为每当网络状态发生变化时，系统就会发出一条值为android.net.conn.CONNECTIVITY_CHANG的广播。

=================
2016/4/7
路由思路，参考ospf：1：像本自治系统中所有路由器发送信息（flooding）
                    2.发送信息是与本路由器相邻的所有路由器的链路状态，包括metric（通                       信情况好不好）
                    3.只有放链路状态发生变化时，才向所有路由器发送flooding


=====================
2016/4/6
路由表改成双链表，删除写完
git备份

===========
2016/3/31
路由表同一父节点插入（单链表）

下面要写路由表删除，更新

===============

2016/3/28
字符串切分ok，路由表struct简单版（以后改）
pingack，直接套用pingreq，先_send_simple_command(PINGRESP)，
                            _packet_queue(command, packet, 0, 0);

pingreq是_send_simple_command(PINGREQ)，
         _packet_queue(command, packet, 0, 0);
         队列中，mpkt。mid给自己赋值，字符串拼接，传到_out_packet和current_out_packet

usart的收完后，应有添加一步存数据


======================================
2016/3/21
usart recv弄完

=========================================
2016/3/17
ping短帧send写完，rec有待改进，
字符串拼接get
尚未测试
问题：日志，错误机制，队列，多线程


=======================================
2016/3/15
htons网络字符转换
time（0）：用秒数表达
改完了send-ping（调用send-simple-command转换网络字符）
send-simple-command 返回了packet队列，队列无失误的话，返回succces=0 return0
packet-queue
设定了一个结构体，来满足dict功能，不过后期可能需要读位来定

线程没有看，注释掉了
_current_out_packet=none，那么数据格式怎么设定呢